// This script is used to search the synaptic parameter space of the IS3 model by varying the number of excitatory and inhibitory synapses as well as their presynaptic spike rates

load_file("nrngui.hoc")
load_file("init_model.hoc") // Loads IS3 model with full morphology & properties (as well as parameters and point processes)
		
access soma
distance()

// Set Parameters
tstop = 10000 // (ms)
steps_per_ms = 10 // Same as IS3 since cvode wasn't working
dt = 0.1 // Same as IS3 since cvode wasn't working
dendn = 0 // Specifies section - still need to adjust distance vector though
sec_divs = PARAM_NUM_SOMA_DEND_SEGMENTS // total number of segments
count = 0 // for indexing
nPYR = PARAM_MAX_EXCITATORY // total - 1 to account for indexing
nIS3 = PARAM_MAX_INHIBITORY
nMS = PARAM_MAX_INHIBITORY
nBIS = PARAM_MAX_INHIBITORY // total - 1 to account for indexing

// Initialize variables
objectvar PYRsynapses[nPYR], IS3synapses[nIS3], MSsynapses[nMS], BISsynapses[nBIS]
objectvar PYRncs[nPYR], IS3ncs[nIS3], MSncs[nMS], BISncs[nBIS]
objectvar PYRnss[nPYR], IS3nss[nIS3], MSnss[nMS], BISnss[nBIS]
	
objectvar tPYRsynapses[nPYR], tIS3synapses[nIS3], tMSsynapses[nMS], tBISsynapses[nBIS]
objectvar tPYRncs[nPYR], tIS3ncs[nIS3], tMSncs[nMS], tBISncs[nBIS]
objectvar tPYRnss[nPYR], tIS3nss[nIS3], tMSnss[nMS], tBISnss[nBIS]
	
objectvar PYRrisetime_vec, IS3risetime_vec, MSrisetime_vec, BISrisetime_vec
objectvar PYRdecaytime_vec, IS3decaytime_vec, MSdecaytime_vec, BISdecaytime_vec
objectvar PYRminweight_vec, IS3minweight_vec, MSminweight_vec, BISminweight_vec
objectvar dist_vec, synlayer_vec, dendn_vec, fok, fdist
objectvar frisePYR, friseIS3, friseMS, friseBIS
objectvar fdecayPYR, fdecayIS3, fdecayMS, fdecayBIS 
objectvar fminweightPYR, fminweightIS3, fminweightMS, fminweightBIS
objectvar fdendn, frecV, frecSI, frecSI_inh, nil, fih, recV, recSI, recSI_inh 

strdef MODEL_TOPDIR, Cell_Name, filename, filename1, filename2, filename3, filename4, filename5, filename6, filename7, filename8, filename9, filename10, filename11, filename12, filename13, filename14, filename15, filename16, filename17, model_abs_path, model_abs_path1, model_abs_path2, model_abs_path3, model_abs_path4, model_abs_path5, model_abs_path6, model_abs_path7, model_abs_path8, model_abs_path9, model_abs_path10, model_abs_path11, model_abs_path12, model_abs_path13, model_abs_path14, model_abs_path15, model_abs_path16, model_abs_path17 //

MODEL_TOPDIR = "./SDprox1Output" //
if (cell == 1){
	MODEL_TOPDIR = "./Output_Gormadoc" //
	Cell_Name = "Gormadoc"
}
if (cell == 2){
	MODEL_TOPDIR = "./Output_Isembard" //
	Cell_Name = "Isembard"
}

// Load Synapse Parameter Vectors
dist_vec = new Vector(sec_divs,0)

PYRrisetime_vec = new Vector(sec_divs,0)
IS3risetime_vec = new Vector(sec_divs,0)
MSrisetime_vec = new Vector(sec_divs,0)
BISrisetime_vec = new Vector(sec_divs,0)
	
PYRdecaytime_vec = new Vector(sec_divs,0)
IS3decaytime_vec = new Vector(sec_divs,0)
MSdecaytime_vec = new Vector(sec_divs,0)
BISdecaytime_vec = new Vector(sec_divs,0)

PYRminweight_vec = new Vector(sec_divs,0)
IS3minweight_vec = new Vector(sec_divs,0)
MSminweight_vec = new Vector(sec_divs,0)
BISminweight_vec = new Vector(sec_divs,0)

dendn_vec = new Vector(sec_divs,0)

fminweightPYR = new File("model_minweightvecPYR.dat")
fminweightIS3 = new File("model_minweightvecIS3.dat")
fminweightMS = new File("model_minweightvecMS.dat")
fminweightBIS = new File("model_minweightvecIS3.dat")

frisePYR = new File("model_risetimevecPYR.dat")
friseIS3 = new File("model_risetimevecIS3.dat")
friseMS = new File("model_risetimevecMS.dat")
friseBIS = new File("model_risetimevecBIS.dat")

fdecayPYR = new File("model_decaytimevecPYR.dat")
fdecayIS3 = new File("model_decaytimevecIS3.dat")
fdecayMS = new File("model_decaytimevecMS.dat")
fdecayBIS = new File("model_decaytimevecBIS.dat")

fdendn = new File("model_dendsectionvec.dat")
fdist = new File("model_distvec.dat")

sprint(model_abs_path1,"%s/%s",MODEL_TOPDIR, "model_minweightvecPYR.dat")
fminweightPYR.ropen(model_abs_path1)
sprint(model_abs_path1,"%s/%s",MODEL_TOPDIR, "model_minweightvecIS3.dat")
fminweightIS3.ropen(model_abs_path1)
sprint(model_abs_path1,"%s/%s",MODEL_TOPDIR, "model_minweightvecMS.dat")
fminweightMS.ropen(model_abs_path1)
sprint(model_abs_path1,"%s/%s",MODEL_TOPDIR, "model_minweightvecBIS.dat")
fminweightBIS.ropen(model_abs_path1)

sprint(model_abs_path1,"%s/%s",MODEL_TOPDIR, "model_risetimevecPYR.dat")
frisePYR.ropen(model_abs_path1)
sprint(model_abs_path1,"%s/%s",MODEL_TOPDIR, "model_risetimevecIS3.dat")
friseIS3.ropen(model_abs_path1)
sprint(model_abs_path1,"%s/%s",MODEL_TOPDIR, "model_risetimevecMS.dat")
friseMS.ropen(model_abs_path1)
sprint(model_abs_path1,"%s/%s",MODEL_TOPDIR, "model_risetimevecBIS.dat")
friseBIS.ropen(model_abs_path1)

sprint(model_abs_path1,"%s/%s",MODEL_TOPDIR, "model_decaytimevecPYR.dat")
fdecayPYR.ropen(model_abs_path1)
sprint(model_abs_path1,"%s/%s",MODEL_TOPDIR, "model_decaytimevecIS3.dat")
fdecayIS3.ropen(model_abs_path1)
sprint(model_abs_path1,"%s/%s",MODEL_TOPDIR, "model_decaytimevecMS.dat")
fdecayMS.ropen(model_abs_path1)
sprint(model_abs_path1,"%s/%s",MODEL_TOPDIR, "model_decaytimevecBIS.dat")
fdecayBIS.ropen(model_abs_path1)

sprint(model_abs_path1,"%s/%s",MODEL_TOPDIR, "model_dendsectionvec.dat")
fdendn.ropen(model_abs_path1)
sprint(model_abs_path1,"%s/%s",MODEL_TOPDIR, "model_distvec.dat")
fdist.ropen(model_abs_path1)

PYRminweight_vec.scanf(fminweightPYR)
IS3minweight_vec.scanf(fminweightIS3)
MSminweight_vec.scanf(fminweightMS)
BISminweight_vec.scanf(fminweightBIS)

PYRrisetime_vec.scanf(frisePYR)
IS3risetime_vec.scanf(friseIS3)
MSrisetime_vec.scanf(friseMS)
BISrisetime_vec.scanf(friseBIS)

PYRdecaytime_vec.scanf(fdecayPYR)
IS3decaytime_vec.scanf(fdecayIS3)
MSdecaytime_vec.scanf(fdecayMS)
BISdecaytime_vec.scanf(fdecayBIS)

dendn_vec.scanf(fdendn)
dist_vec.scanf(fdist)

PYRsyncount = 0
IS3syncount = 0
MSsyncount = 0
BISsyncount = 0
count = 0 // for indexing purposes to do with the input vectors

for (dendn = 0; dendn<PARAM_NUMSEC_DEND; dendn = dendn+1){
	print "Section Number: ", dendn_vec.x[dendn]
			
	for (i = 1; i<=dend[dendn].nseg; i = i+1) {
	
		// Specifies proportion along section (i.e. from 0 to 1)
		prop = ((dend[dendn].L/dend[dendn].nseg)*i - (dend[dendn].L/dend[dendn].nseg)/2)/dend[dendn].L // finds the center of each segment, as defined by its proportional distance along each section; (prop = (i-0.5)/dend[dendn].nseg also works)
			
		// Assign optimized synapse parameter values to 9 excitatory synapses on the compartment if in SR
		access dend[dendn]
		for (l = 1; l<=PARAM_EXCSYNS_PER_COMPARTMENT; l = l + 1){
			PYRsynapses[PYRsyncount] = new Exp2Syn(prop)
			dend[dendn] PYRsynapses[PYRsyncount].loc(prop) // assign to current compartment
			PYRsynapses[PYRsyncount].tau1 = PYRrisetime_vec.x[count]
			PYRsynapses[PYRsyncount].tau2 = PYRdecaytime_vec.x[count]
			PYRsynapses[PYRsyncount].e = 0
			PYRnss[PYRsyncount] = new VecStim(prop)
			PYRncs[PYRsyncount] = new NetCon(PYRnss[PYRsyncount], PYRsynapses[PYRsyncount])
			PYRncs[PYRsyncount].weight = PYRminweight_vec.x[count]
				
			// Theta
			tPYRsynapses[PYRsyncount] = new Exp2Syn(prop)
			dend[dendn] tPYRsynapses[PYRsyncount].loc(prop) // assign to current compartment
			tPYRsynapses[PYRsyncount].tau1 = PYRrisetime_vec.x[count]
			tPYRsynapses[PYRsyncount].tau2 = PYRdecaytime_vec.x[count]
			tPYRsynapses[PYRsyncount].e = 0
			tPYRnss[PYRsyncount] = new NetStim(prop)
			tPYRnss[PYRsyncount].interval = tstop
			tPYRnss[PYRsyncount].number = 0
			tPYRnss[PYRsyncount].start = tstop
			tPYRnss[PYRsyncount].noise = 0
			tPYRncs[PYRsyncount] = new NetCon(tPYRnss[PYRsyncount], tPYRsynapses[PYRsyncount])
			tPYRncs[PYRsyncount].weight = PYRminweight_vec.x[count]
			
			PYRsyncount = PYRsyncount + 1
		}
		
		for (l = 1; l<=PARAM_INHSYNS_PER_COMPARTMENT; l = l + 1){
			IS3synapses[IS3syncount] = new Exp2Syn(prop)
			dend[dendn] IS3synapses[IS3syncount].loc(prop) // assign to current compartment
			IS3synapses[IS3syncount].tau1 = IS3risetime_vec.x[count]
			IS3synapses[IS3syncount].tau2 = IS3decaytime_vec.x[count]
			IS3synapses[IS3syncount].e = -80
			IS3nss[IS3syncount] = new VecStim(prop)
			IS3ncs[IS3syncount] = new NetCon(IS3nss[IS3syncount], IS3synapses[IS3syncount])
			IS3ncs[IS3syncount].weight = IS3minweight_vec.x[count]
				
			// Theta
			tIS3synapses[IS3syncount] = new Exp2Syn(prop)
			dend[dendn] tIS3synapses[IS3syncount].loc(prop) // assign to current compartment
			tIS3synapses[IS3syncount].tau1 = IS3risetime_vec.x[count]
			tIS3synapses[IS3syncount].tau2 = IS3decaytime_vec.x[count]
			tIS3synapses[IS3syncount].e = -80
			tIS3nss[IS3syncount] = new NetStim(prop)
			tIS3nss[IS3syncount].interval = tstop
			tIS3nss[IS3syncount].number = 0
			tIS3nss[IS3syncount].start = tstop
			tIS3nss[IS3syncount].noise = 0
			tIS3ncs[IS3syncount] = new NetCon(tIS3nss[IS3syncount], tIS3synapses[IS3syncount])
			tIS3ncs[IS3syncount].weight = IS3minweight_vec.x[count]
			
			IS3syncount = IS3syncount + 1
		}
		for (l = 1; l<=PARAM_INHSYNS_PER_COMPARTMENT; l = l + 1){
			MSsynapses[MSsyncount] = new Exp2Syn(prop)
			dend[dendn] MSsynapses[MSsyncount].loc(prop) // assign to current compartment
			MSsynapses[MSsyncount].tau1 = MSrisetime_vec.x[count]
			MSsynapses[MSsyncount].tau2 = MSdecaytime_vec.x[count]
			MSsynapses[MSsyncount].e = -80
			MSnss[MSsyncount] = new VecStim(prop)
			MSncs[MSsyncount] = new NetCon(MSnss[MSsyncount], MSsynapses[MSsyncount])
			MSncs[MSsyncount].weight = MSminweight_vec.x[count]
				
			// Theta
			tMSsynapses[MSsyncount] = new Exp2Syn(prop)
			dend[dendn] tMSsynapses[MSsyncount].loc(prop) // assign to current compartment
			tMSsynapses[MSsyncount].tau1 = MSrisetime_vec.x[count]
			tMSsynapses[MSsyncount].tau2 = MSdecaytime_vec.x[count]
			tMSsynapses[MSsyncount].e = -80
			tMSnss[MSsyncount] = new NetStim(prop)
			tMSnss[MSsyncount].interval = tstop
			tMSnss[MSsyncount].number = 0
			tMSnss[MSsyncount].start = tstop
			tMSnss[MSsyncount].noise = 0
			tMSncs[MSsyncount] = new NetCon(tMSnss[MSsyncount], tMSsynapses[MSsyncount])
			tMSncs[MSsyncount].weight = MSminweight_vec.x[count]
			
			MSsyncount = MSsyncount + 1
		}
		for (l = 1; l<=PARAM_INHSYNS_PER_COMPARTMENT; l = l + 1){
			BISsynapses[BISsyncount] = new Exp2Syn(prop)
			dend[dendn] BISsynapses[BISsyncount].loc(prop) // assign to current compartment
			BISsynapses[BISsyncount].tau1 = BISrisetime_vec.x[count]
			BISsynapses[BISsyncount].tau2 = BISdecaytime_vec.x[count]
			BISsynapses[BISsyncount].e = -80
			BISnss[BISsyncount] = new VecStim(prop)
			BISncs[BISsyncount] = new NetCon(BISnss[BISsyncount], BISsynapses[BISsyncount])
			BISncs[BISsyncount].weight = BISminweight_vec.x[count]
				
			// Theta
			tBISsynapses[BISsyncount] = new Exp2Syn(prop)
			dend[dendn] BISsynapses[BISsyncount].loc(prop) // assign to current compartment
			tBISsynapses[BISsyncount].tau1 = BISrisetime_vec.x[count]
			tBISsynapses[BISsyncount].tau2 = BISdecaytime_vec.x[count]
			tBISsynapses[BISsyncount].e = -80
			tBISnss[BISsyncount] = new NetStim(prop)
			tBISnss[BISsyncount].interval = tstop
			tBISnss[BISsyncount].number = 0
			tBISnss[BISsyncount].start = tstop
			tBISnss[BISsyncount].noise = 0
			tBISncs[BISsyncount] = new NetCon(tBISnss[BISsyncount], tBISsynapses[BISsyncount])
			tBISncs[BISsyncount].weight = BISminweight_vec.x[count]
			
			BISsyncount = BISsyncount + 1
		}
		
		count = count + 1		
	}	
}

// Generate randomized indexing for random synapse selection
objref r, randPYRindex, randIS3index, randMSindex, randBISindex
proc randomize_syns() {
	r = new Random($1*10 + $2)
	randPYRindex = new Vector(nPYR)
	randIS3index = new Vector(nIS3)
	randMSindex = new Vector(nMS)
	randBISindex = new Vector(nBIS)
	tempindex = 0
	repeats = 1 // Initialize at 1 so it does skip the while loop
	for (i = 0; i < nPYR; i = i + 1){
		while (repeats > 0){
			repeats = 0 // Reset the count of repeats to 0 for next iteration
			tempindex = r.discunif(-1, nPYR-1) // Generate random integer
			for k=0,nPYR-1 repeats = repeats + (tempindex == randPYRindex.x[k]) // Check if value repeats (i.e. if repeats > 0)
		}
		randPYRindex.x[i] = tempindex // Assign value if not repeated
		repeats = 1 // Re-initialize to 1 so it doesn't skip while loop
	}
	tempindex = 0
	repeats = 1 // Initialize at 1 so it does skip the while loop
	for (i = 0; i < nIS3; i = i + 1){
		while (repeats > 0){
			repeats = 0 // Reset the count of repeats to 0 for next iteration
			tempindex = r.discunif(-1, nIS3-1) // Generate random integer
			for k=0,nIS3-1 repeats = repeats + (tempindex == randIS3index.x[k]) // Check if value repeats (i.e. if repeats > 0)
		}
		randIS3index.x[i] = tempindex // Assign value if not repeated
		repeats = 1 // Re-initialize to 1 so it doesn't skip while loop
	}
	tempindex = 0
	repeats = 1 // Initialize at 1 so it does skip the while loop
	for (i = 0; i < nMS; i = i + 1){
		while (repeats > 0){
			repeats = 0 // Reset the count of repeats to 0 for next iteration
			tempindex = r.discunif(-1, nMS-1) // Generate random integer
			for k=0,nMS-1 repeats = repeats + (tempindex == randMSindex.x[k]) // Check if value repeats (i.e. if repeats > 0)
		}
		randMSindex.x[i] = tempindex // Assign value if not repeated
		repeats = 1 // Re-initialize to 1 so it doesn't skip while loop
	}
	tempindex = 0
	repeats = 1 // Initialize at 1 so it does skip the while loop
	for (i = 0; i < nBIS; i = i + 1){
		while (repeats > 0){
			repeats = 0 // Reset the count of repeats to 0 for next iteration
			tempindex = r.discunif(-1, nBIS-1) // Generate random integer
			for k=0,nBIS-1 repeats = repeats + (tempindex == randBISindex.x[k]) // Check if value repeats (i.e. if repeats > 0)
		}
		randBISindex.x[i] = tempindex // Assign value if not repeated
		repeats = 1 // Re-initialize to 1 so it doesn't skip while loop
	}
}

// Generate randomized indexing for random synapse selection of theta-timed synapses
objref tr, trandPYRindex, trandIS3index, trandMSindex, trandBISindex
proc randomize_tsyns() {
	tr = new Random($1*10 + $2)
	trandPYRindex = new Vector(nPYR)
	trandIS3index = new Vector(nIS3)
	trandMSindex = new Vector(nMS)
	trandBISindex = new Vector(nBIS)
	tempindex = 0
	repeats = 1 // Initialize at 1 so it does skip the while loop
	for (i = 0; i < nPYR; i = i + 1){
		while (repeats > 0){
			repeats = 0 // Reset the count of repeats to 0 for next iteration
			tempindex = tr.discunif(-1, nPYR-1) // Generate random integer
			for k=0,nPYR-1 repeats = repeats + (tempindex == trandPYRindex.x[k]) // Check if value repeats (i.e. if repeats > 0)
		}
		trandPYRindex.x[i] = tempindex // Assign value if not repeated
		repeats = 1 // Re-initialize to 1 so it doesn't skip while loop
	}
	tempindex = 0
	repeats = 1 // Initialize at 1 so it does skip the while loop
	for (i = 0; i < nIS3; i = i + 1){
		while (repeats > 0){
			repeats = 0 // Reset the count of repeats to 0 for next iteration
			tempindex = tr.discunif(-1, nIS3-1) // Generate random integer
			for k=0,nIS3-1 repeats = repeats + (tempindex == trandIS3index.x[k]) // Check if value repeats (i.e. if repeats > 0)
		}
		trandIS3index.x[i] = tempindex // Assign value if not repeated
		repeats = 1 // Re-initialize to 1 so it doesn't skip while loop
	}
	tempindex = 0
	repeats = 1 // Initialize at 1 so it does skip the while loop
	for (i = 0; i < nMS; i = i + 1){
		while (repeats > 0){
			repeats = 0 // Reset the count of repeats to 0 for next iteration
			tempindex = tr.discunif(-1, nMS-1) // Generate random integer
			for k=0,nMS-1 repeats = repeats + (tempindex == trandMSindex.x[k]) // Check if value repeats (i.e. if repeats > 0)
		}
		trandMSindex.x[i] = tempindex // Assign value if not repeated
		repeats = 1 // Re-initialize to 1 so it doesn't skip while loop
	}
	tempindex = 0
	repeats = 1 // Initialize at 1 so it does skip the while loop
	for (i = 0; i < nBIS; i = i + 1){
		while (repeats > 0){
			repeats = 0 // Reset the count of repeats to 0 for next iteration
			tempindex = tr.discunif(-1, nBIS-1) // Generate random integer
			for k=0,nBIS-1 repeats = repeats + (tempindex == trandBISindex.x[k]) // Check if value repeats (i.e. if repeats > 0)
		}
		trandBISindex.x[i] = tempindex // Assign value if not repeated
		repeats = 1 // Re-initialize to 1 so it doesn't skip while loop
	}
}

access soma

// Record presynaptic events at all synapses. 
// Note that rexcvec & rinhvec values should be the same as excprespiketrains & inhprespiketrains values.
objectvar PYRprespiketrains[nPYR], IS3prespiketrains[nIS3], MSprespiketrains[nMS], BISprespiketrains[nBIS]
	
for i=0,nPYR-1 PYRprespiketrains[i] = new Vector()
for i=0,nIS3-1 IS3prespiketrains[i] = new Vector()
for i=0,nMS-1 MSprespiketrains[i] = new Vector()
for i=0,nBIS-1 BISprespiketrains[i] = new Vector()

for i=0,nPYR-1 PYRncs[i].record(PYRprespiketrains[i])
for i=0,nIS3-1 IS3ncs[i].record(IS3prespiketrains[i])
for i=0,nMS-1 MSncs[i].record(MSprespiketrains[i])
for i=0,nBIS-1 BISncs[i].record(BISprespiketrains[i])

// Create random uniform sample for spikes times
objectvar rPYR, rPYRvec, rIS3, rIS3vec, rMS, rMSvec, rBIS, rBISvec
objectvar frecPYRPreSpikeTrains, frecIS3PreSpikeTrains, frecMSPreSpikeTrains, frecBISPreSpikeTrains
objectvar rPYRMat, rIS3Mat, rMSMat, rBISMat
objectvar apc, apctimes

apc = new APCount(0.5)
apctimes = new Vector()
apc.thresh = -20
apc.record(apctimes)

objref sp1
strdef spfn1
sp1 = new Shape()
sp1.show(0)

// Create new synapses (that are defunct and not connected) for plotting recording locations
if (cell == 1){
	d1_comp = 31
	d2_comp = 43
	d3_comp = 46
	d4_comp = 50
} else if (cell == 2){
	d1_comp = 86
	d2_comp = 89
	d3_comp = 101
	d4_comp = 107
}					
access dend[0]
distance()
access dend[d1_comp]
dist1 = distance(0)
printf("\tDistance1 = %g\n", dist1)
access dend[d2_comp]
dist2 = distance(0)
printf("\tDistance2 = %g\n", dist2)
access dend[d3_comp]
dist3 = distance(0)
printf("\tDistance3 = %g\n", dist3)
access dend[d4_comp]
dist4 = distance(0)
printf("\tDistance4 = %g\n", dist4)
access soma

objectvar s, d1, d2, d3, d4
access dend[0]
s = new Exp2Syn(0)
access dend[d1_comp]
d1 = new Exp2Syn(0)
access dend[d2_comp]
d2 = new Exp2Syn(0)
access dend[d3_comp]
d3 = new Exp2Syn(0)
access dend[d4_comp]
d4 = new Exp2Syn(0)
access soma

objref sp3
strdef spfn3
sp3 = new Shape()
sp3.show(0)
sp3.point_mark(s,6,"O",2) //.point_mark(objvar, colorindex, style, size); 2 = red; 3 = blue; 4 = green; 5 = orange
sp3.point_mark(d1,2,"O",2) //.point_mark(objvar, colorindex, style, size); 2 = red; 3 = blue; 4 = green; 5 = orange
sp3.point_mark(d2,3,"O",2) //.point_mark(objvar, colorindex, style, size); 2 = red; 3 = blue; 4 = green; 5 = orange
sp3.point_mark(d3,4,"O",2) //.point_mark(objvar, colorindex, style, size); 2 = red; 3 = blue; 4 = green; 5 = orange
sp3.point_mark(d4,5,"O",2) //.point_mark(objvar, colorindex, style, size); 2 = red; 3 = blue; 4 = green; 5 = orange

if (cell == 1){
	sprint(spfn3,"PLOTShapesGormadoc/SynLocShapePlotGormadoc_RecordingLocations.ps")
	sp3.printfile(spfn3)
	sp3.point_mark_remove()
} else if (cell == 2){
	sprint(spfn3,"PLOTShapesIsembard/SynLocShapePlotIsembard_RecordingLocations.ps")
	sp3.printfile(spfn3)
	sp3.point_mark_remove()
}

objectvar s, d1, d2, d3, d4 // i.e. delete these processes

proc f() {
	
	rIS3 = new Random($6*10+$7+8221)
	rIS3.uniform(0,tstop)
	rMS = new Random($6*3+$7+98238)
	rMS.uniform(0,tstop)
	rBIS = new Random($6*98+$7+12)
	rBIS.uniform(0,tstop)
	rPYR = new Random($6*123+$7+1256)
	rPYR.uniform(0,tstop)
	
	inhsyncount = $1
	excsyncount = $2
	inhsynspikes = $3
	excsynspikes = $4
	SaveExample = $5
	nexccommon = $8
	ninhcommon = $9
		
	numINHtheta = $10
	numEXCtheta = $11
	synfreqINH = $12
	synfreqEXC = $13
	
	addSUP = $14
	
	// Re-initialize all inhibitory synapses such that they are silent when starting a new iteration
	rIS3vec = new Vector(0)
	for i=0,nIS3-1 IS3nss[randIS3index.x[i]].play(rIS3vec)
	rMSvec = new Vector(0)
	for i=0,nMS-1 MSnss[randMSindex.x[i]].play(rMSvec)
	rBISvec = new Vector(0)
	for i=0,nBIS-1 BISnss[randBISindex.x[i]].play(rBISvec)

	// Re-initialize all excitatory synapses such that they are silent when starting a new iteration
	rPYRvec = new Vector(0)
	for i=0,nPYR-1 PYRnss[randPYRindex.x[i]].play(rPYRvec)
	
	// Assign excitatory spike times
	if (excsynspikes > 0) {
		rPYRMat = new Matrix((excsyncount+1),excsynspikes)
		for (i=0; i < excsyncount; i = i + 1){ // On each iteration add 1 SR and 1 SLM excitatory synapse
	
			// Sample new spike times for common inputs
			rPYRvec = new Vector(excsynspikes)
			rPYRvec.setrand(rPYR)
			rPYRvec.sort()

			xcom = 1
			// Common input loop where synapses are given the same input until the maximum number of common inputs is passed
			while (xcom <= nexccommon && i < excsyncount && i < nPYR) {
		
				// Add SR excitatory inputs
				PYRnss[randPYRindex.x[i]].play(rPYRvec)
				for k=0,excsynspikes-1 rPYRMat.x[i][k] = rPYRvec.x[k]
				
				sp1.point_mark(PYRsynapses[randPYRindex.x[i]],5,"O",2) //.point_mark(objvar, colorindex, style, size); 2 = red; 3 = blue; 4 = green; 5 = orange
				
				i = i + 1 // update indexing
				xcom = xcom + 1
			}
			i = i - 1 // i.e. so that i does not get updated twice resulting in skipped synapses
		}
	}

	// Assign inhibitory spike times
	if (inhsynspikes > 0){
		rIS3Mat = new Matrix(inhsyncount/3+1,inhsynspikes)
		rMSMat = new Matrix(inhsyncount/3+1,inhsynspikes)
		rBISMat = new Matrix(inhsyncount/3+1,inhsynspikes)
		for (i=0; i < int(inhsyncount/3); i = i + 1){ 
			rIS3vec = new Vector(inhsynspikes)
			rIS3vec.setrand(rIS3)
			rIS3vec.sort()
			rMSvec = new Vector(inhsynspikes)
			rMSvec.setrand(rMS)
			rMSvec.sort()
			rBISvec = new Vector(inhsynspikes)
			rBISvec.setrand(rBIS)
			rBISvec.sort()

			xcom = 1
			while (xcom <= ninhcommon && i < int(inhsyncount/3) && i < nIS3 && i < nMS && i < nBIS) {
				IS3nss[randIS3index.x[i]].play(rIS3vec)
				for k=0,inhsynspikes-1 rIS3Mat.x[i][k] = rIS3vec.x[k]
				MSnss[randMSindex.x[i]].play(rMSvec)
				for k=0,inhsynspikes-1 rMSMat.x[i][k] = rMSvec.x[k]
				BISnss[randBISindex.x[i]].play(rBISvec)
				for k=0,inhsynspikes-1 rBISMat.x[i][k] = rBISvec.x[k]
				
				sp1.point_mark(IS3synapses[randIS3index.x[i]],3,"O",2) //.point_mark(objvar, colorindex, style, size); 2 = red; 3 = blue; 4 = green; 5 = orange
				sp1.point_mark(MSsynapses[randMSindex.x[i]],4,"O",2) //.point_mark(objvar, colorindex, style, size); 2 = red; 3 = blue; 4 = green; 5 = orange
				sp1.point_mark(BISsynapses[randBISindex.x[i]],2,"O",2) //.point_mark(objvar, colorindex, style, size); 2 = red; 3 = blue; 4 = green; 5 = orange

				i = i + 1
				xcom = xcom + 1
			}
			i = i - 1 // i.e. so that i does not get updated twice resulting in skipped synapses
		}
		
	}
	
	// Reset all inputs
	for (i=0; i < int(nIS3); i = i + 1){

		tIS3nss[trandIS3index.x[i]].interval = tstop // Convert Hz to ms
		tIS3nss[trandIS3index.x[i]].number = 0 // total duration divided by interval
		tIS3nss[trandIS3index.x[i]].start = tstop
		tIS3nss[trandIS3index.x[i]].noise = 0
		
		tMSnss[trandMSindex.x[i]].interval = tstop // Convert Hz to ms
		tMSnss[trandMSindex.x[i]].number = 0 // total duration divided by interval
		tMSnss[trandMSindex.x[i]].start = tstop
		tMSnss[trandMSindex.x[i]].noise = 0

		tBISnss[trandBISindex.x[i]].interval = tstop // Convert Hz to ms
		tBISnss[trandBISindex.x[i]].number = 0 // total duration divided by interval
		tBISnss[trandBISindex.x[i]].start = tstop
		tBISnss[trandBISindex.x[i]].noise = 0
	}
	for (i=0; i < int(nPYR); i = i + 1){

		tPYRnss[trandPYRindex.x[i]].interval = tstop // Convert Hz to ms
		tPYRnss[trandPYRindex.x[i]].number = 0 // total duration divided by interval
		tPYRnss[trandPYRindex.x[i]].start = tstop
		tPYRnss[trandPYRindex.x[i]].noise = 0
		
	}
	
	// Add theta-timed inputs (keep going down random index to prevent placing synapses on same spots)
	if (synfreqINH > 0){
		for (i=int(inhsyncount/3); i < int(inhsyncount/3)+numINHtheta; i = i + 1){ 

			tIS3nss[trandIS3index.x[i]].interval = (1/synfreqINH)*1000 // Convert Hz to ms
			tIS3nss[trandIS3index.x[i]].number = tstop/((1/synfreqINH)*1000) // total duration divided by interval
			tIS3nss[trandIS3index.x[i]].start = 15.625 // peak-rise phase
			tIS3nss[trandIS3index.x[i]].noise = 0
			
			tMSnss[trandMSindex.x[i]].interval = (1/synfreqINH)*1000 // Convert Hz to ms
			tMSnss[trandMSindex.x[i]].number = tstop/((1/synfreqINH)*1000) // total duration divided by interval
			tMSnss[trandMSindex.x[i]].start = 78.125 // fall-trough phase
			tMSnss[trandMSindex.x[i]].noise = 0

			tBISnss[trandBISindex.x[i]].interval = (1/synfreqINH)*1000 // Convert Hz to ms
			tBISnss[trandBISindex.x[i]].number = tstop/((1/synfreqINH)*1000) // total duration divided by interval
			tBISnss[trandBISindex.x[i]].start = 93.75 // trough phase
			tBISnss[trandBISindex.x[i]].noise = 0
				
		}
	}else{
		for (i=0; i < int(nIS3); i = i + 1){

			tIS3nss[trandIS3index.x[i]].interval = tstop // Convert Hz to ms
			tIS3nss[trandIS3index.x[i]].number = 0 // total duration divided by interval
			tIS3nss[trandIS3index.x[i]].start = tstop
			tIS3nss[trandIS3index.x[i]].noise = 0
			
			tMSnss[trandMSindex.x[i]].interval = tstop // Convert Hz to ms
			tMSnss[trandMSindex.x[i]].number = 0 // total duration divided by interval
			tMSnss[trandMSindex.x[i]].start = tstop
			tMSnss[trandMSindex.x[i]].noise = 0

			tBISnss[trandBISindex.x[i]].interval = tstop // Convert Hz to ms
			tBISnss[trandBISindex.x[i]].number = 0 // total duration divided by interval
			tBISnss[trandBISindex.x[i]].start = tstop
			tBISnss[trandBISindex.x[i]].noise = 0
		}
	} 
	if (synfreqEXC > 0){
		for (i=int(excsyncount/3); i < int(excsyncount/3)+numEXCtheta; i = i + 1){ 

			tPYRnss[trandPYRindex.x[i]].interval = (1/synfreqEXC)*1000 // Convert Hz to ms
			tPYRnss[trandPYRindex.x[i]].number = tstop/((1/synfreqEXC)*1000) // total duration divided by interval
			tPYRnss[trandPYRindex.x[i]].start = 93.75 // trough phase
			tPYRnss[trandPYRindex.x[i]].noise = 0
			
		}
	}else{
		for (i=0; i < int(nPYR); i = i + 1){

			tPYRnss[trandPYRindex.x[i]].interval = tstop // Convert Hz to ms
			tPYRnss[trandPYRindex.x[i]].number = 0 // total duration divided by interval
			tPYRnss[trandPYRindex.x[i]].start = tstop
			tPYRnss[trandPYRindex.x[i]].noise = 0
			
		}
	} 
	
	// Add suppression inputs (keep going down random index to prevent placing synapses on same spots)
	if (addSUP == 1){
		period = (1/synfreqINH)*1000
		stime = 2000
		numSUPSyns = ((tstop-stime)/period)*7 // i.e. this adds 7 IS3 spikes per cycle following stime
		for (i=int(inhsyncount/3)+numINHtheta; i < int(inhsyncount/3)+numINHtheta+numSUPSyns; i = i + 1){ 
			tIS3nss[trandIS3index.x[i]].interval = period // Convert Hz to ms
			tIS3nss[trandIS3index.x[i]].number = (tstop-stime)/period // total duration divided by interval
			tIS3nss[trandIS3index.x[i]].start = 15.625+stime // peak-rise phase
			tIS3nss[trandIS3index.x[i]].noise = 0.1
			stime = stime + period // add 1 synapse per theta cycle to get increasing cumulative spike rate
			if (stime >= tstop){
				stime = 2000
			}
		}
	}
	
	if (SaveExample==1){
		// Save Excitatory Raster Matrices
		sprint(filename4,"PYRPreSpikeTrains_%g_NumInh_%g_NumExc_%g_InhSpikes_%g_ExcSpikes_%g_NumExcCommon_%g_NumInhCommon.dat",inhsyncount,excsyncount,inhsynspikes,excsynspikes,nexccommon,ninhcommon)
		frecPYRPreSpikeTrains = new File(filename4)
		frecPYRPreSpikeTrains.wopen(filename4)
		if (excsynspikes > 0) {
			rPYRMat.fprint(frecPYRPreSpikeTrains,"%f\t") // Spike times sampled from random distribution
		}
		frecPYRPreSpikeTrains.close()

		// Save Inhibitory Raster Matrix
		sprint(filename5,"IS3PreSpikeTrains_%g_NumInh_%g_NumExc_%g_InhSpikes_%g_ExcSpikes_%g_NumExcCommon_%g_NumInhCommon.dat",inhsyncount,excsyncount,inhsynspikes,excsynspikes,nexccommon,ninhcommon)
		frecIS3PreSpikeTrains = new File(filename5)
		frecIS3PreSpikeTrains.wopen(filename5)
		if (inhsynspikes > 0){
			rIS3Mat.fprint(frecIS3PreSpikeTrains,"%f\t") // Spike times sampled from random distribution
		}
		frecIS3PreSpikeTrains.close()
		
		// Save Inhibitory Raster Matrix
		sprint(filename6,"MSPreSpikeTrains_%g_NumInh_%g_NumExc_%g_InhSpikes_%g_ExcSpikes_%g_NumExcCommon_%g_NumInhCommon.dat",inhsyncount,excsyncount,inhsynspikes,excsynspikes,nexccommon,ninhcommon)
		frecMSPreSpikeTrains = new File(filename6)
		frecMSPreSpikeTrains.wopen(filename6)
		if (inhsynspikes > 0){
			rMSMat.fprint(frecMSPreSpikeTrains,"%f\t") // Spike times sampled from random distribution
		}
		frecMSPreSpikeTrains.close()
		
		// Save Inhibitory Raster Matrix
		sprint(filename7,"BISPreSpikeTrains_%g_NumInh_%g_NumExc_%g_InhSpikes_%g_ExcSpikes_%g_NumExcCommon_%g_NumInhCommon.dat",inhsyncount,excsyncount,inhsynspikes,excsynspikes,nexccommon,ninhcommon)
		frecBISPreSpikeTrains = new File(filename7)
		frecBISPreSpikeTrains.wopen(filename7)
		if (inhsynspikes > 0){
			rBISMat.fprint(frecBISPreSpikeTrains,"%f\t") // Spike times sampled from random distribution
		}
		frecBISPreSpikeTrains.close()
		
		// Run Simulation and Record Vm Vector
		recV = new Vector()
		recV.record(&soma.v(0.5))
		run()
		sprint(filename1,"model_%g_NumInh_%g_NumExc_%g_InhSpikes_%g_ExcSpikes_%g_NumExcCommon_%g_NumInhCommon.dat",inhsyncount,excsyncount,inhsynspikes,excsynspikes,nexccommon,ninhcommon)
		frecV = new File(filename1)
		frecV.wopen(filename1)
		recV.vwrite(frecV) // Use printf instead of vwrite if you want a text file instead of a binary file
		frecV.close()
		
		if (cell == 1){
			sprint(spfn1,"PLOTShapesGormadoc/SynLocShapePlotGormadoc_%g_NumInh_%g_NumExc_%g_InhSpikes_%g_ExcSpikes_%g_NumExcCommon_%g_NumInhCommon.ps",inhsyncount,excsyncount,inhsynspikes,excsynspikes,nexccommon,ninhcommon)
			sp1.printfile(spfn1)
			sp1.point_mark_remove()
		} else if (cell == 2){
			sprint(spfn1,"PLOTShapesIsembard/SynLocShapePlotIsembard_%g_NumInh_%g_NumExc_%g_InhSpikes_%g_ExcSpikes_%g_NumExcCommon_%g_NumInhCommon.ps",inhsyncount,excsyncount,inhsynspikes,excsynspikes,nexccommon,ninhcommon)
			sp1.printfile(spfn1)
			sp1.point_mark_remove()
		}
	}else{
		// Run Simulation and Record Vm Vector
		recV = new Vector()
		recV.record(&soma.v(0.5))
		run()
		
		if (cell == 1){
			sp1.point_mark_remove()
		} else if (cell == 2){
			sp1.point_mark_remove()
		}
	}
}
